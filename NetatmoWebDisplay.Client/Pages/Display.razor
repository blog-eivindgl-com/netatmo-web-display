@page "/display"
@rendermode InteractiveAuto
@inject NetatmoWebDisplay.Client.Services.IDisplayService _displayService;
@using NetatmoWebDisplay.Client.Model;
@using NetatmoWebDisplay.Client.Components;

<PageTitle>Display</PageTitle>

@if(display == null)
{
    <p><em>Loading....</em></p>
}
else
{
    var topTemperatureWidgets = new List<Widget>();
    var bottomTemperatureWidgets = new List<Widget>();
    foreach (var widget in display.Widgets)
    {
        switch(widget.Type)
        {
            case "temperature":
                if (widget.Description == "Stua" || widget.Description == "Soverommet" || widget.Description == "Serverskapet")
                {
                    topTemperatureWidgets.Add(widget);
                }
                else if (widget.Description == "Vestveggen ute" || widget.Description == "Ã˜stveggen ute")
                {
                    bottomTemperatureWidgets.Add(widget);
                }
                break;
        }
    }

    <p><TemperatureWidget Widgets="@topTemperatureWidgets" /></p>
    <p><TemperatureWidget Widgets="@bottomTemperatureWidgets" /></p>
}


@code {
    private const int RefreshInterval = 1000;
    private NetatmoWebDisplay.Client.Model.Display? display = null;
    private bool _shouldRefresh = true;
    private Timer _timer;

    private async Task LoadDataAsync()
    {
        display = await _displayService.GetDisplay();
        _shouldRefresh = true;
        await InvokeAsync(() => StateHasChanged());
    }

    protected override bool ShouldRender()
    {
        if (_shouldRefresh) 
        {
            _shouldRefresh = false;
            return true;
        }

        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        _timer = new Timer(async _ =>
        {
            await LoadDataAsync();
        }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(RefreshInterval));
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
