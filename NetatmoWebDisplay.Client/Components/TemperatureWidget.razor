@using NetatmoWebDisplay.Client.Model;

<div class="temp-widget" @onclick="ChangeMode">
    <div class="temp-int-value">@_intValue</div>
    <div class="temp-dec-value">@_decValue</div>
    <img class="temp-trend" src="@_trend" />
    <div class="temp-description">@_description</div>
</div>

@code
{
    private string _description = "temperature";
    private string _intValue = "0";
    private string _decValue = "0Â°C";
    private string _trend = "images/wi-trend-flat.png";
    private string _mode = "current";
    private List<Widget> _modules = new List<Widget>();
    private int? _selectedModule = null;
    private bool _hasCycledThroughModule = false;
    private DateTime? _selectedModuleAt = null;

    [Parameter]
    public IEnumerable<Widget> Widgets { get; set; } = new List<Widget>();
    [Parameter]
    public string? DefaultModule { get; set; } = null;

    protected override void OnParametersSet()
    {
        if (Widgets.Count() > 0)
        {
            foreach (var widget in Widgets)
            {
                UpdateModuleData(widget);
            }

            DrawWidget();
        }

        base.OnParametersSet();
    }

    public void DrawWidget()
    {
        if (_selectedModule == null)
        {
            _selectedModule = FindDefaultModule();

            if (_selectedModule == null)
            {
                _selectedModule = 0;
            }
        }
        else if (string.IsNullOrEmpty(DefaultModule) && (_selectedModuleAt == null || (DateTime.Now.Subtract(_selectedModuleAt.Value).TotalSeconds > 360)))
        {
            _selectedModule = FindModuleWithLowestTemperature();
        }

        if (_selectedModule != null)
        {
            var widget = _modules[_selectedModule.Value];
            switch(_mode)
            {
                case "min":
                    SplitIntoIntAndDec(widget.MinValue);
                    _description = widget.MinTime;
                    _trend = "images/wi-min.png";
                    break;
                case "max":
                    SplitIntoIntAndDec(widget.MaxValue);
                    _description = widget.MaxTime;
                    _trend = "images/wi-max.png";
                    break;
                default:
                    SplitIntoIntAndDec(widget.Value);
                    _description = widget.Description;
                    switch(widget.Trend)
                    {
                        case "up":
                            _trend = "images/wi-trend-up.png";
                            break;
                        case "down":
                            _trend = "images/wi-trend-down.png";
                            break;
                        default:
                            _trend = "images/wi-trend-flat.png";
                            break;
                    }
                    break;
            }
        }
    }

    private void SplitIntoIntAndDec(string value)
    {
        _intValue = value.Substring(0, value.IndexOf('.'));
        _decValue = value.Substring(value.IndexOf('.'));
    }

    private int? FindDefaultModule()
    {
        if (!string.IsNullOrEmpty(DefaultModule))
        {
            for (int index = 0; index < _modules.Count; index++)
            {
                var m = _modules[index];

                if (m.Description == DefaultModule)
                {
                    return index;
                }
            }
        }

        return null;
    }

    private Decimal TemperatureAsDecimal(string temperature)
    {
        return Decimal.Parse(temperature.Substring(0, temperature.IndexOf('.') + 1));
    }

    private int? FindModuleWithLowestTemperature()
    {
        int? lowTempModule = null;
        Decimal? lowTemp = null;

        for(int index = 0; index < _modules.Count; index++)
        {
            var m = _modules[index];
            Decimal temp = TemperatureAsDecimal(m.Value);

            if (lowTempModule == null)
            {
                lowTempModule = index;
                lowTemp = temp;
            }
            else
            {
                if (temp < lowTemp)
                {
                    lowTempModule = index;
                    lowTemp = temp;
                }
            }
        }

        return lowTempModule;
    }

    private void UpdateModuleData(Widget widget)
    {
        bool isReplaced = false;

        for (int index = 0; index < _modules.Count; index++)
        {
            var m = _modules[index];

            if (string.Equals(m.Description, widget.Description))
            {
                _modules[index] = widget;
                isReplaced = true;
            }
        }

        if (!isReplaced)
        {
            _modules.Add(widget);
        }
    }

    private void ChangeMode()
    {
        /* If more than one module is used by this widget,
         * cycle through them and make sure not the one with
         * lowest temperature is the one automatically displayed for a while
         */
        if (_hasCycledThroughModule && _modules.Count > 1)
        {
            if (_selectedModule == null)
            {
                _selectedModule = 0;
            }
            else
            {
                _selectedModule += 1;
                
                if (_selectedModule >= _modules.Count)
                {
                    _selectedModule = 0;
                }
            }

            _selectedModuleAt = DateTime.Now;
            _hasCycledThroughModule = false;
        }

        switch(_mode)
        {
            case "current":
                _mode = "min";
                break;
            case "min":
                _mode = "max";
                break;
            default:
                _mode = "current";
                _hasCycledThroughModule = true;
                break;
        }

        DrawWidget();
    }
}